const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
  // デフォルト管理者ユーザーの作成
  const hashedPassword = await bcrypt.hash('admin123', 10);
  
  const admin = await prisma.user.upsert({
    where: { username: 'admin' },
    update: {},
    create: {
      username: 'admin',
      password: hashedPassword,
      name: '管理者',
    },
  });

  console.log('✅ デフォルトユーザーを作成しました:', admin);

  // ダミーイベントの作成
  const event = await prisma.event.upsert({
    where: { id: 'demo-event-1' },
    update: {},
    create: {
      id: 'demo-event-1',
      name: '第1回駅伝大会',
      date: new Date('2024-12-15T09:00:00Z'),
      status: '準備中',
      userId: admin.id,
    },
  });

  console.log('✅ ダミーイベントを作成しました:', event);

  // ダミーチェックポイントの作成
  const checkpoints = [];
  for (let i = 1; i <= 4; i++) {
    const checkpoint = await prisma.checkpoint.upsert({
      where: { 
        eventId_distance: {
          eventId: event.id,
          distance: i
        }
      },
      update: {},
      create: {
        eventId: event.id,
        distance: i,
        name: `${i}km地点`,
      },
    });
    checkpoints.push(checkpoint);
  }

  console.log('✅ チェックポイントを作成しました:', checkpoints.length + '個');

  // ダミーチームの作成（76チーム）
  const teams = [];
  const teamNames = [
    '青空チーム', '疾風チーム', '流星チーム', '雷神チーム', '烈火チーム',
    '氷河チーム', '嵐チーム', '太陽チーム', '月影チーム', '星雲チーム',
    '富士山チーム', '桜チーム', '紅葉チーム', '雪チーム', '海チーム',
    '山チーム', '川チーム', '森チーム', '花チーム', '鳥チーム',
    '竜チーム', '鳳凰チーム', '麒麟チーム', '白虎チーム', '朱雀チーム',
    '玄武チーム', '天馬チーム', '一角獣チーム', 'グリフィンチーム', 'ドラゴンチーム',
    'エンジェルチーム', 'デビルチーム', 'ヒーローチーム', 'ナイトチーム', 'ウィザードチーム',
    'パラディンチーム', 'バーバリアンチーム', 'レンジャーチーム', 'ローグチーム', 'クレリックチーム',
    'モンクチーム', 'ファイターチーム', 'ソーサラーチーム', 'ウォーロックチーム', 'バードチーム',
    'ブレードチーム', 'アローンチーム', 'シールドチーム', 'スピアチーム', 'ハンマーチーム',
    'ソードチーム', 'ボウチーム', 'ダガーチーム', 'メイスチーム', 'クロスボウチーム',
    'スラッシュチーム', 'ピアスチーム', 'クラッシュチーム', 'スラッシュチーム', 'エクスプロードチーム',
    'バーストチーム', 'ブラストチーム', 'ショックチーム', 'フリーズチーム', 'バーンチーム',
    'ポイズンチーム', 'カースチーム', 'ヒールチーム', 'ブレスチーム', 'チャージチーム',
    'ジャンプチーム', 'ダッシュチーム', 'ストライクチーム', 'スウィープチーム', 'スピンチーム',
    'ターンチーム', 'リフトチーム', 'ドロップチーム', 'グラブチーム', 'キックチーム',
    'パンチチーム', 'スラップチーム', 'タッチチーム', 'プッシュチーム', 'プルチーム'
  ];

  const memberNames = [
    'ランニングマン', 'スピードスター', '疾風の如く', '風のように', '光の速度で', '雷神', '烈火の戦士', '氷の魔術師', '嵐の勇者', '太陽の使者',
    '月影の忍者', '星雲の魔法使い', '富士山の守護者', '桜の妖精', '紅葉の詩人', '雪の女王', '海の冒険者', '山の番人', '川の流れ', '森の賢者',
    '花の園芸家', '鳥の歌い手', '竜の騎士', '鳳凰の舞姫', '麒麟の守護神', '白虎の戦士', '朱雀の炎使い', '玄武の盾', '天馬の騎手', '一角獣の王子',
    'グリフィンの騎士', 'ドラゴンスレイヤー', 'エンジェルの翼', 'デビルの角', 'ヒーローのマント', 'ナイトの剣', 'ウィザードの杖', 'パラディンの盾', 'バーバリアンの斧', 'レンジャーの弓',
    'ローグの短剣', 'クレリックの聖書', 'モンクの拳', 'ファイターの大剣', 'ソーサラーの魔法', 'ウォーロックの呪文', 'バードの歌', 'ブレードマスター', 'アローンマスター', 'シールドガード',
    'スピアランサー', 'ハンマーウォリアー', 'ソードマスター', 'ボウハンター', 'ダガーアサシン', 'メイスクラッシャー', 'クロスボウスナイパー', 'スラッシュアタッカー', 'ピアスストライカー', 'クラッシュボンバー',
    'エクスプロードマジック', 'バーストシューター', 'ブラストキャノン', 'ショックウェーブ', 'フリーズマジック', 'バーンファイア', 'ポイズンアロー', 'カーススペル', 'ヒールマジック', 'ブレスアタック',
    'チャージパワー', 'ジャンプマスター', 'ダッシュスピード', 'ストライクパンチ', 'スウィープキック', 'スピンアタック', 'ターンマイスター', 'リフトパワー', 'ドロップボム', 'グラブマスター',
    'キックファイター', 'パンチボクサー', 'スラップアタッカー', 'タッチマジック', 'プッシュパワー', 'プルマスター', 'スライドスピード', 'ロールダウン', 'フリップジャンプ', 'トルネードスピン',
    'ホイールキック', 'バックフリップ', 'サイドキック', 'フロントキック', 'ラウンドキック', 'ハイキック', 'ローキック', 'スピンキック', 'ジャンピングキック', 'フライングキック',
    'ダブルキック', 'トリプルキック', 'コンボアタック', 'ファイナルストライク', 'アルティメットブロー', 'スーパーコンボ', 'メガアタック', 'ギガストライク', 'テラパンチ', 'ペタキック',
    'エクサスラッシュ', 'ゼタストライク', 'ヨタブロー', 'ロナパンチ', 'ケタキック', 'ヘタストライク', 'デカパワー', 'チビスピード', 'マッチョマン', 'スリムガール',
    'ビッグマウス', 'スモールアイ', 'ロングレッグ', 'ショートアーム', 'ワイドショルダー', 'ナローヘップ', 'ファットベリー', 'スリムウエスト', 'ビッグチェスト', 'スモールヘッド',
    'ロングネック', 'ショートテール', 'ワイドフット', 'ナローハンド', 'ビッグトゥー', 'スモールフィンガー', 'ロングナイル', 'ショートヘア', 'ワイドマウス', 'ナローノーズ',
    'ビッグアイ', 'スモールイヤー', 'ロングアーム', 'ショートレッグ', 'ワイドバック', 'ナローフロント', 'ビッグサイド', 'スモールトップ', 'ロングボトム', 'ショートミドル',
    'ワイドエッジ', 'ナローボーダー', 'ビッグコーナー', 'スモールセンター', 'ロングライン', 'ショートカーブ', 'ワイドアングル', 'ナローポイント', 'ビッグサークル', 'スモールスクエア',
    'ロングトライアングル', 'ショートダイヤモンド', 'ワイドハート', 'ナローダイヤ', 'ビッグスター', 'スモールムーン', 'ロングサン', 'ショートクラウド', 'ワイドレインボー', 'ナローミスト',
    'ビッグストーム', 'スモールドロップ', 'ロングリバー', 'ショートストリーム', 'ワイドオーシャン', 'ナローシー', 'ビッグレイク', 'スモールポンド', 'ロングウォーター', 'ショートスプラッシュ',
    'ワイドウェーブ', 'ナローチャネル', 'ビッグベイ', 'スモールコーブ', 'ロングフィヨルド', 'ショートガルフ', 'ワイドストレイト', 'ナローパス', 'ビッグアーチペラゴ', 'スモールペニンシュラ',
    'ロングアイランド', 'ショートアトール', 'ワイドリーフ', 'ナローポイント', 'ビッグヘッドランド', 'スモールケープ', 'ロングプロモントリー', 'ショートネック', 'ワイドベイ', 'ナローインレット',
    'ビッグハーバー', 'スモールポート', 'ロングドック', 'ショートピア', 'ワイドクエイ', 'ナローマリーナ', 'ビッグアンカレッジ', 'スモールバース', 'ロングホール', 'ショートベース',
    'ワイドステーション', 'ナローターミナル', 'ビッグデポ', 'スモールストップ', 'ロングホルト', 'ショートレスト', 'ワイドレラックス', 'ナローチル', 'ビッグクール', 'スモールフレッシュ',
    'ロングクリーン', 'ショートピュア', 'ワイドクリア', 'ナローシャープ', 'ビッグブライト', 'スモールライト', 'ロングシャイン', 'ショートグロウ', 'ワイドグリマー', 'ナロースパークル',
    'ビッグトゥインクル', 'スモールフラッシュ', 'ロングビーム', 'ショートレイ', 'ワイドストリーク', 'ナローライン', 'ビッグストリーム', 'スモールフロー', 'ロングカレント', 'ショートドリフト',
    'ワイドフロート', 'ナローソア', 'ビッググライド', 'スモールスライド', 'ロングスライプ', 'ショートスキップ', 'ワイドホップ', 'ナロージャンプ', 'ビッグバウンド', 'スモールスプリング',
    'ロングリコイル', 'ショートリバウンド', 'ワイドエコー', 'ナローリング', 'ビッグレゾナンス', 'スモールバイブレーション', 'ロングオシレーション', 'ショートパルス', 'ワイドビート', 'ナローレイト',
    'ビッグリズム', 'スモールテンポ', 'ロングメーター', 'ショートカウント', 'ワイドサイクル', 'ナローパターン', 'ビッグシーケンス', 'スモールシリーズ', 'ロングチェーン', 'ショートリンク',
    'ワイドコネクション', 'ナローアソシエーション', 'ビッグリレーション', 'スモールボンド', 'ロングタイ', 'ショートアタッチメント', 'ワイドユニオン', 'ナローアライアンス', 'ビッグパートナーシップ', 'スモールコラボレーション',
    'ロングパートナー', 'ショートアソシエイト', 'ワイドコラボレーター', 'ナローティームメイト', 'ビッグコレーグ', 'スモールコンパニオン', 'ロングフレンド', 'ショートアライ', 'ワイドサポーター', 'ナローバックアップ',
    'ビッグヘルパー', 'スモールアシスタント', 'ロングエイド', 'ショートサポート', 'ワイドリリーフ', 'ナローサブスティチュート', 'ビッグスタンドイン', 'スモールリプレースメント', 'ロングサブスティチューション', 'ショートサブスティチューション'
  ];

  for (let i = 1; i <= 76; i++) {
    const teamName = teamNames[i - 1] || `チーム${i}`;
    const team = await prisma.team.upsert({
      where: {
        eventId_teamNumber: {
          eventId: event.id,
          teamNumber: i
        }
      },
      update: {},
      create: {
        eventId: event.id,
        teamNumber: i,
        teamName: teamName,
        member1: memberNames[(i * 5) % memberNames.length],
        member2: memberNames[(i * 5 + 1) % memberNames.length],
        member3: memberNames[(i * 5 + 2) % memberNames.length],
        member4: memberNames[(i * 5 + 3) % memberNames.length],
        member5: memberNames[(i * 5 + 4) % memberNames.length],
      },
    });
    teams.push(team);
  }

  console.log('✅ ダミーチームを作成しました:', teams.length + 'チーム');

  // ダミーレコードの作成（一部のチームがチェックポイントを通過）
  const records = [];
  const sampleTeams = teams.slice(0, 20); // 最初の20チームにレコードを作成

  for (const team of sampleTeams) {
    for (let checkpointIndex = 0; checkpointIndex < 2; checkpointIndex++) {
      const checkpoint = checkpoints[checkpointIndex];
      const runnerNumber = checkpointIndex + 1;
      
      // ランダムな時間でレコードを作成
      const baseTime = new Date('2024-12-15T09:00:00Z');
      const randomMinutes = Math.floor(Math.random() * 30) + (checkpointIndex * 10);
      const timestamp = new Date(baseTime.getTime() + randomMinutes * 60000);

      const record = await prisma.record.create({
        data: {
          teamId: team.id,
          checkpointId: checkpoint.id,
          runnerNumber: runnerNumber,
          timestamp: timestamp,
        },
      });
      records.push(record);
    }
  }

  console.log('✅ ダミーレコードを作成しました:', records.length + '件');
  console.log('🎉 ダミーデータの投入が完了しました！');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });




